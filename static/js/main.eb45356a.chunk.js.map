{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","city","weatherData","isLoaded","inputHandler","e","setState","target","value","buttonHandler","preventDefault","className","location","geoURL","encodeURIComponent","axios","get","then","res","coord","long","data","features","center","lati","weatherURL","currently","result","summary","temperature","precipProbability","catch","onChange","this","name","placeholder","onClick","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iTA2FeA,G,iNArFbC,MAAQ,CACNC,KAAM,GACNC,YAAa,KACbC,UAAU,G,EAGZC,aAAe,SAAAC,GACb,EAAKC,SAAS,CAAEL,KAAMI,EAAEE,OAAOC,S,EAGjCC,cAAgB,SAAAJ,GACdA,EAAEK,iBACF,EAAKJ,SAAS,CAAEJ,YAAc,yBAAKS,UAAU,aAC7C,IAAMC,EAAY,EAAKZ,MAAMC,KAEvBY,EAAM,4DAAwDC,mBAAmBF,GAA3E,8BADE,6FACF,YACZ,OAAOG,IAAMC,IAAIH,GAChBI,MAAK,SAAAC,GACJ,IAAMC,EAAQ,CACZC,KAAMF,EAAIG,KAAKC,SAAS,GAAGC,OAAO,GAClCC,KAAMN,EAAIG,KAAKC,SAAS,GAAGC,OAAO,IAG9BE,EAAU,+EADF,mCACE,YAAoFN,EAAMK,KAA1F,YAAkGL,EAAMC,KAAxG,qBAChB,OAAOL,IAAMC,IAAIS,GAChBR,MAAK,SAAAC,GACJ,IAAMhB,EAAcgB,EAAIG,KAAKK,UACvBC,EACJ,yBAAKhB,UAAU,QACb,4BAAMO,EAAIG,KAAKT,UACf,4BAAMV,EAAY0B,SAClB,2BAAG,iDAAgC1B,EAAY2B,YAA/C,KACA,2BAAG,oEAAgF,IAAhC3B,EAAY4B,kBAA/D,MAMJ,OAFA,EAAKxB,SAAS,CAAEJ,YAAayB,IAEtB,QAERI,OAAM,SAAA1B,GACL,EAAKC,SAAS,CAAEJ,YACd,6BACE,uEACA,2DAKP6B,OAAM,SAAA1B,GACL,EAAKC,SAAS,CAAEJ,YACd,6BACE,uEACA,yD,wEAON,OACE,yBAAKS,UAAU,aACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,SACb,8CACE,6FAEJ,yBAAKA,UAAU,SAGjB,yBAAKA,UAAU,YACb,8BACE,2BACEqB,SAAWC,KAAK7B,aAChB8B,KAAK,OACLC,YAAY,uEACd,4BAAQC,QAAUH,KAAKxB,eAAvB,WAEA,yBAAKE,UAAU,iBAAkBsB,KAAKjC,MAAME,mB,GA/EtCmC,cCOEC,QACW,cAA7BC,OAAO3B,SAAS4B,UAEe,UAA7BD,OAAO3B,SAAS4B,UAEhBD,OAAO3B,SAAS4B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,kB","file":"static/js/main.eb45356a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios'\n\nimport './App.css'\n\nclass App extends Component {\n  state = {\n    city: '',\n    weatherData: null,\n    isLoaded: false\n  }\n\n  inputHandler = e => {\n    this.setState({ city: e.target.value })\n  }\n\n  buttonHandler = e => {\n    e.preventDefault()\n    this.setState({ weatherData: (<div className=\"loader\"></div>) })\n    const location =  this.state.city \n    const token = 'pk.eyJ1Ijoib3RhcmlucXIiLCJhIjoiY2p4d2UyZGVsMGVzdjNkbXZtOGFpajRvcSJ9.IstlB__mcSeuqZmDAm8eEQ'\n    const geoURL = `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(location)}.json?access_token=${token}&limit=1`\n    return axios.get(geoURL)\n    .then(res => {\n      const coord = {\n        long: res.data.features[0].center[0],\n        lati: res.data.features[0].center[1]\n      }\n      const token = 'bbadd512123b32f96284d2b6c219714c'\n      const weatherURL = `https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/${token}/${coord.lati},${coord.long}?lang=es&units=si`\n      return axios.get(weatherURL)\n      .then(res => {\n        const weatherData = res.data.currently\n        const result = (\n          <div className=\"Data\">\n            <h1>{ res.data.location }</h1>\n            <h3>{ weatherData.summary }</h3>\n            <p><strong>Temperatura: </strong>{ weatherData.temperature }C</p>\n            <p><strong>Porcentaje de precipitación: </strong>{ weatherData.precipProbability * 100 }%</p>\n          </div>\n        )\n\n        this.setState({ weatherData: result })\n\n        return null\n      })\n      .catch(e => {\n        this.setState({ weatherData: (\n          <div>\n            <h1>No se ha podido encontrar la localidad.</h1>\n            <h3>Pruebe nuevamente.</h3>\n          </div>\n        ) })\n      })\n    })\n    .catch(e => {\n      this.setState({ weatherData: (\n        <div>\n          <h1>No se ha podido encontrar la localidad.</h1>\n          <h3>Pruebe nuevamente.</h3>\n        </div>\n      ) })\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"Container\">\n        <div className=\"Header\">\n          <div className=\"Title\">\n            <h1>Weather Report</h1>\n              <h4>Tu página favorita del clima hecho por tu panda favorito.</h4>\n          </div>\n          <div className=\"Img\">\n          </div>\n        </div>\n        <div className=\"Searcher\">\n          <form>\n            <input\n              onChange={ this.inputHandler }\n              name=\"city\"\n              placeholder=\"Escriba la ciudad de la cual esté interesado en saber su clima.\" />\n            <button onClick={ this.buttonHandler }>BUSCAR</button>\n          </form>\n            <div className=\"WeatherReport\">{ this.state.weatherData }</div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}